/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.14.4.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

@Injectable({
    providedIn: 'root'
})
export class DeviceClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getDevices() : Observable<PresentationDevice[]> {
        let url_ = this.baseUrl + "/Device/all";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetDevices(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetDevices(<any>response_);
                } catch (e) {
                    return <Observable<PresentationDevice[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<PresentationDevice[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetDevices(response: HttpResponseBase): Observable<PresentationDevice[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(PresentationDevice.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<any>(<any>null);;
    }

    getDeviceSensors(id: number) : Observable<DeviceSensor[]> {
        let url_ = this.baseUrl + "/Device/sensors/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetDeviceSensors(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetDeviceSensors(<any>response_);
                } catch (e) {
                    return <Observable<DeviceSensor[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<DeviceSensor[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetDeviceSensors(response: HttpResponseBase): Observable<DeviceSensor[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(DeviceSensor.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<any>(<any>null);;
    }
}

@Injectable({
    providedIn: 'root'
})
export class PackagesClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getPackages() : Observable<PresentationPackage[]> {
        let url_ = this.baseUrl + "/Packages/all";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetPackages(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetPackages(<any>response_);
                } catch (e) {
                    return <Observable<PresentationPackage[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<PresentationPackage[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetPackages(response: HttpResponseBase): Observable<PresentationPackage[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(PresentationPackage.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<any>(<any>null);;
    }

    getPackage(id: number) : Observable<PresentationPackage> {
        let url_ = this.baseUrl + "/Packages/single/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetPackage(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetPackage(<any>response_);
                } catch (e) {
                    return <Observable<PresentationPackage>><any>_observableThrow(e);
                }
            } else
                return <Observable<PresentationPackage>><any>_observableThrow(response_);
        }));
    }

    protected processGetPackage(response: HttpResponseBase): Observable<PresentationPackage> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PresentationPackage.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PresentationPackage>(<any>null);
    }

    getUnfinishedPackages() : Observable<UnfinishedPackage[]> {
        let url_ = this.baseUrl + "/Packages/unfinished";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetUnfinishedPackages(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetUnfinishedPackages(<any>response_);
                } catch (e) {
                    return <Observable<UnfinishedPackage[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<UnfinishedPackage[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetUnfinishedPackages(response: HttpResponseBase): Observable<UnfinishedPackage[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(UnfinishedPackage.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<any>(<any>null);;
    }

    getUnfinishedPackage(id: number) : Observable<UnfinishedPackage> {
        let url_ = this.baseUrl + "/Packages/unfinished/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetUnfinishedPackage(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetUnfinishedPackage(<any>response_);
                } catch (e) {
                    return <Observable<UnfinishedPackage>><any>_observableThrow(e);
                }
            } else
                return <Observable<UnfinishedPackage>><any>_observableThrow(response_);
        }));
    }

    protected processGetUnfinishedPackage(response: HttpResponseBase): Observable<UnfinishedPackage> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UnfinishedPackage.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<UnfinishedPackage>(<any>null);
    }

    createNewPackage(type: PackageType) : Observable<CreatedUnfinishedPackage> {
        let url_ = this.baseUrl + "/Packages/new/{type}";
        if (type === undefined || type === null)
            throw new Error("The parameter 'type' must be defined.");
        url_ = url_.replace("{type}", encodeURIComponent("" + type));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateNewPackage(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateNewPackage(<any>response_);
                } catch (e) {
                    return <Observable<CreatedUnfinishedPackage>><any>_observableThrow(e);
                }
            } else
                return <Observable<CreatedUnfinishedPackage>><any>_observableThrow(response_);
        }));
    }

    protected processCreateNewPackage(response: HttpResponseBase): Observable<CreatedUnfinishedPackage> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CreatedUnfinishedPackage.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CreatedUnfinishedPackage>(<any>null);
    }

    finishPackage(id: number) : Observable<FinishedPackage> {
        let url_ = this.baseUrl + "/Packages/finish/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processFinishPackage(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processFinishPackage(<any>response_);
                } catch (e) {
                    return <Observable<FinishedPackage>><any>_observableThrow(e);
                }
            } else
                return <Observable<FinishedPackage>><any>_observableThrow(response_);
        }));
    }

    protected processFinishPackage(response: HttpResponseBase): Observable<FinishedPackage> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = FinishedPackage.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FinishedPackage>(<any>null);
    }
}

export class PresentationDevice implements IPresentationDevice {
    id?: number;
    deviceName?: string | undefined;
    deviceShort?: string | undefined;
    sensors?: DeviceSensor[] | undefined;
    packages?: PresentationPackage[] | undefined;

    constructor(data?: IPresentationDevice) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.deviceName = _data["deviceName"];
            this.deviceShort = _data["deviceShort"];
            if (Array.isArray(_data["sensors"])) {
                this.sensors = [] as any;
                for (let item of _data["sensors"])
                    this.sensors!.push(DeviceSensor.fromJS(item));
            }
            if (Array.isArray(_data["packages"])) {
                this.packages = [] as any;
                for (let item of _data["packages"])
                    this.packages!.push(PresentationPackage.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PresentationDevice {
        data = typeof data === 'object' ? data : {};
        let result = new PresentationDevice();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["deviceName"] = this.deviceName;
        data["deviceShort"] = this.deviceShort;
        if (Array.isArray(this.sensors)) {
            data["sensors"] = [];
            for (let item of this.sensors)
                data["sensors"].push(item.toJSON());
        }
        if (Array.isArray(this.packages)) {
            data["packages"] = [];
            for (let item of this.packages)
                data["packages"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPresentationDevice {
    id?: number;
    deviceName?: string | undefined;
    deviceShort?: string | undefined;
    sensors?: DeviceSensor[] | undefined;
    packages?: PresentationPackage[] | undefined;
}

export class DeviceSensor implements IDeviceSensor {
    id?: number;
    type?: SensorType;
    name?: string | undefined;
    deviceId?: number;
    device?: PresentationDevice | undefined;

    constructor(data?: IDeviceSensor) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.type = _data["type"];
            this.name = _data["name"];
            this.deviceId = _data["deviceId"];
            this.device = _data["device"] ? PresentationDevice.fromJS(_data["device"]) : <any>undefined;
        }
    }

    static fromJS(data: any): DeviceSensor {
        data = typeof data === 'object' ? data : {};
        let result = new DeviceSensor();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["type"] = this.type;
        data["name"] = this.name;
        data["deviceId"] = this.deviceId;
        data["device"] = this.device ? this.device.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IDeviceSensor {
    id?: number;
    type?: SensorType;
    name?: string | undefined;
    deviceId?: number;
    device?: PresentationDevice | undefined;
}

export enum SensorType {
    Skeletal = 0,
    Pir = 1,
    Distance = 2,
    Light = 3,
    GenericValue = 4,
}

export class PresentationPackage implements IPresentationPackage {
    id?: number;
    name?: string | undefined;
    description?: string | undefined;
    type?: PackageType;
    creator?: ToolboxUser | undefined;
    lastEditedBy?: ToolboxUser | undefined;
    created?: Date;
    lastEdited?: Date;
    metadata?: PackageMetadata[] | undefined;
    intendedDevices?: PresentationDevice[] | undefined;
    scripts?: PresentationScript[] | undefined;

    constructor(data?: IPresentationPackage) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.description = _data["description"];
            this.type = _data["type"];
            this.creator = _data["creator"] ? ToolboxUser.fromJS(_data["creator"]) : <any>undefined;
            this.lastEditedBy = _data["lastEditedBy"] ? ToolboxUser.fromJS(_data["lastEditedBy"]) : <any>undefined;
            this.created = _data["created"] ? new Date(_data["created"].toString()) : <any>undefined;
            this.lastEdited = _data["lastEdited"] ? new Date(_data["lastEdited"].toString()) : <any>undefined;
            if (Array.isArray(_data["metadata"])) {
                this.metadata = [] as any;
                for (let item of _data["metadata"])
                    this.metadata!.push(PackageMetadata.fromJS(item));
            }
            if (Array.isArray(_data["intendedDevices"])) {
                this.intendedDevices = [] as any;
                for (let item of _data["intendedDevices"])
                    this.intendedDevices!.push(PresentationDevice.fromJS(item));
            }
            if (Array.isArray(_data["scripts"])) {
                this.scripts = [] as any;
                for (let item of _data["scripts"])
                    this.scripts!.push(PresentationScript.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PresentationPackage {
        data = typeof data === 'object' ? data : {};
        let result = new PresentationPackage();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["description"] = this.description;
        data["type"] = this.type;
        data["creator"] = this.creator ? this.creator.toJSON() : <any>undefined;
        data["lastEditedBy"] = this.lastEditedBy ? this.lastEditedBy.toJSON() : <any>undefined;
        data["created"] = this.created ? this.created.toISOString() : <any>undefined;
        data["lastEdited"] = this.lastEdited ? this.lastEdited.toISOString() : <any>undefined;
        if (Array.isArray(this.metadata)) {
            data["metadata"] = [];
            for (let item of this.metadata)
                data["metadata"].push(item.toJSON());
        }
        if (Array.isArray(this.intendedDevices)) {
            data["intendedDevices"] = [];
            for (let item of this.intendedDevices)
                data["intendedDevices"].push(item.toJSON());
        }
        if (Array.isArray(this.scripts)) {
            data["scripts"] = [];
            for (let item of this.scripts)
                data["scripts"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPresentationPackage {
    id?: number;
    name?: string | undefined;
    description?: string | undefined;
    type?: PackageType;
    creator?: ToolboxUser | undefined;
    lastEditedBy?: ToolboxUser | undefined;
    created?: Date;
    lastEdited?: Date;
    metadata?: PackageMetadata[] | undefined;
    intendedDevices?: PresentationDevice[] | undefined;
    scripts?: PresentationScript[] | undefined;
}

export enum PackageType {
    Gallery = 0,
    Video = 1,
    Scene = 2,
    Model = 3,
}

export class IdentityUserOfString implements IIdentityUserOfString {
    id?: string | undefined;
    userName?: string | undefined;
    normalizedUserName?: string | undefined;
    email?: string | undefined;
    normalizedEmail?: string | undefined;
    emailConfirmed?: boolean;
    passwordHash?: string | undefined;
    securityStamp?: string | undefined;
    concurrencyStamp?: string | undefined;
    phoneNumber?: string | undefined;
    phoneNumberConfirmed?: boolean;
    twoFactorEnabled?: boolean;
    lockoutEnd?: Date | undefined;
    lockoutEnabled?: boolean;
    accessFailedCount?: number;

    constructor(data?: IIdentityUserOfString) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.userName = _data["userName"];
            this.normalizedUserName = _data["normalizedUserName"];
            this.email = _data["email"];
            this.normalizedEmail = _data["normalizedEmail"];
            this.emailConfirmed = _data["emailConfirmed"];
            this.passwordHash = _data["passwordHash"];
            this.securityStamp = _data["securityStamp"];
            this.concurrencyStamp = _data["concurrencyStamp"];
            this.phoneNumber = _data["phoneNumber"];
            this.phoneNumberConfirmed = _data["phoneNumberConfirmed"];
            this.twoFactorEnabled = _data["twoFactorEnabled"];
            this.lockoutEnd = _data["lockoutEnd"] ? new Date(_data["lockoutEnd"].toString()) : <any>undefined;
            this.lockoutEnabled = _data["lockoutEnabled"];
            this.accessFailedCount = _data["accessFailedCount"];
        }
    }

    static fromJS(data: any): IdentityUserOfString {
        data = typeof data === 'object' ? data : {};
        let result = new IdentityUserOfString();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["userName"] = this.userName;
        data["normalizedUserName"] = this.normalizedUserName;
        data["email"] = this.email;
        data["normalizedEmail"] = this.normalizedEmail;
        data["emailConfirmed"] = this.emailConfirmed;
        data["passwordHash"] = this.passwordHash;
        data["securityStamp"] = this.securityStamp;
        data["concurrencyStamp"] = this.concurrencyStamp;
        data["phoneNumber"] = this.phoneNumber;
        data["phoneNumberConfirmed"] = this.phoneNumberConfirmed;
        data["twoFactorEnabled"] = this.twoFactorEnabled;
        data["lockoutEnd"] = this.lockoutEnd ? this.lockoutEnd.toISOString() : <any>undefined;
        data["lockoutEnabled"] = this.lockoutEnabled;
        data["accessFailedCount"] = this.accessFailedCount;
        return data; 
    }
}

export interface IIdentityUserOfString {
    id?: string | undefined;
    userName?: string | undefined;
    normalizedUserName?: string | undefined;
    email?: string | undefined;
    normalizedEmail?: string | undefined;
    emailConfirmed?: boolean;
    passwordHash?: string | undefined;
    securityStamp?: string | undefined;
    concurrencyStamp?: string | undefined;
    phoneNumber?: string | undefined;
    phoneNumberConfirmed?: boolean;
    twoFactorEnabled?: boolean;
    lockoutEnd?: Date | undefined;
    lockoutEnabled?: boolean;
    accessFailedCount?: number;
}

export class IdentityUser extends IdentityUserOfString implements IIdentityUser {

    constructor(data?: IIdentityUser) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
    }

    static fromJS(data: any): IdentityUser {
        data = typeof data === 'object' ? data : {};
        let result = new IdentityUser();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data; 
    }
}

export interface IIdentityUser extends IIdentityUserOfString {
}

export class ToolboxUser extends IdentityUser implements IToolboxUser {
    firstName?: string | undefined;
    lastName?: string | undefined;

    constructor(data?: IToolboxUser) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
        }
    }

    static fromJS(data: any): ToolboxUser {
        data = typeof data === 'object' ? data : {};
        let result = new ToolboxUser();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        super.toJSON(data);
        return data; 
    }
}

export interface IToolboxUser extends IIdentityUser {
    firstName?: string | undefined;
    lastName?: string | undefined;
}

export class PackageMetadata implements IPackageMetadata {
    id?: number;
    key?: string | undefined;
    value?: string | undefined;

    constructor(data?: IPackageMetadata) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.key = _data["key"];
            this.value = _data["value"];
        }
    }

    static fromJS(data: any): PackageMetadata {
        data = typeof data === 'object' ? data : {};
        let result = new PackageMetadata();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["key"] = this.key;
        data["value"] = this.value;
        return data; 
    }
}

export interface IPackageMetadata {
    id?: number;
    key?: string | undefined;
    value?: string | undefined;
}

export class PresentationScript implements IPresentationScript {
    id?: number;
    name?: string | undefined;
    description?: string | undefined;
    packages?: PresentationPackage[] | undefined;
    files?: DataFile[] | undefined;
    parameters?: ScriptParameter[] | undefined;

    constructor(data?: IPresentationScript) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.description = _data["description"];
            if (Array.isArray(_data["packages"])) {
                this.packages = [] as any;
                for (let item of _data["packages"])
                    this.packages!.push(PresentationPackage.fromJS(item));
            }
            if (Array.isArray(_data["files"])) {
                this.files = [] as any;
                for (let item of _data["files"])
                    this.files!.push(DataFile.fromJS(item));
            }
            if (Array.isArray(_data["parameters"])) {
                this.parameters = [] as any;
                for (let item of _data["parameters"])
                    this.parameters!.push(ScriptParameter.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PresentationScript {
        data = typeof data === 'object' ? data : {};
        let result = new PresentationScript();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["description"] = this.description;
        if (Array.isArray(this.packages)) {
            data["packages"] = [];
            for (let item of this.packages)
                data["packages"].push(item.toJSON());
        }
        if (Array.isArray(this.files)) {
            data["files"] = [];
            for (let item of this.files)
                data["files"].push(item.toJSON());
        }
        if (Array.isArray(this.parameters)) {
            data["parameters"] = [];
            for (let item of this.parameters)
                data["parameters"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IPresentationScript {
    id?: number;
    name?: string | undefined;
    description?: string | undefined;
    packages?: PresentationPackage[] | undefined;
    files?: DataFile[] | undefined;
    parameters?: ScriptParameter[] | undefined;
}

export class DataFile implements IDataFile {
    id?: number;
    path?: string | undefined;

    constructor(data?: IDataFile) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.path = _data["path"];
        }
    }

    static fromJS(data: any): DataFile {
        data = typeof data === 'object' ? data : {};
        let result = new DataFile();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["path"] = this.path;
        return data; 
    }
}

export interface IDataFile {
    id?: number;
    path?: string | undefined;
}

export class ScriptParameter implements IScriptParameter {
    id?: number;
    key?: string | undefined;
    defaultValue?: string | undefined;

    constructor(data?: IScriptParameter) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.key = _data["key"];
            this.defaultValue = _data["defaultValue"];
        }
    }

    static fromJS(data: any): ScriptParameter {
        data = typeof data === 'object' ? data : {};
        let result = new ScriptParameter();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["key"] = this.key;
        data["defaultValue"] = this.defaultValue;
        return data; 
    }
}

export interface IScriptParameter {
    id?: number;
    key?: string | undefined;
    defaultValue?: string | undefined;
}

export class UnfinishedPackage extends PresentationPackage implements IUnfinishedPackage {
    pipelineState?: string | undefined;
    workDir?: string | undefined;
    dataFiles?: DataFile[] | undefined;

    constructor(data?: IUnfinishedPackage) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.pipelineState = _data["pipelineState"];
            this.workDir = _data["workDir"];
            if (Array.isArray(_data["dataFiles"])) {
                this.dataFiles = [] as any;
                for (let item of _data["dataFiles"])
                    this.dataFiles!.push(DataFile.fromJS(item));
            }
        }
    }

    static fromJS(data: any): UnfinishedPackage {
        data = typeof data === 'object' ? data : {};
        let result = new UnfinishedPackage();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pipelineState"] = this.pipelineState;
        data["workDir"] = this.workDir;
        if (Array.isArray(this.dataFiles)) {
            data["dataFiles"] = [];
            for (let item of this.dataFiles)
                data["dataFiles"].push(item.toJSON());
        }
        super.toJSON(data);
        return data; 
    }
}

export interface IUnfinishedPackage extends IPresentationPackage {
    pipelineState?: string | undefined;
    workDir?: string | undefined;
    dataFiles?: DataFile[] | undefined;
}

export class CreatedUnfinishedPackage implements ICreatedUnfinishedPackage {
    id?: number;

    constructor(data?: ICreatedUnfinishedPackage) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): CreatedUnfinishedPackage {
        data = typeof data === 'object' ? data : {};
        let result = new CreatedUnfinishedPackage();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data; 
    }
}

export interface ICreatedUnfinishedPackage {
    id?: number;
}

export class FinishedPackage implements IFinishedPackage {
    id?: number;

    constructor(data?: IFinishedPackage) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): FinishedPackage {
        data = typeof data === 'object' ? data : {};
        let result = new FinishedPackage();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data; 
    }
}

export interface IFinishedPackage {
    id?: number;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((<any>event.target).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}